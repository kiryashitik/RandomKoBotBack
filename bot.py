import os
import random
import json
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import (
    Message, 
    WebAppInfo, 
    ReplyKeyboardMarkup, 
    KeyboardButton,
    ReplyKeyboardRemove
)
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from fastapi import FastAPI, Request
import uvicorn
from database import User, Contest, get_db

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Mini App
app = FastAPI()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è FastAPI
@app.middleware("http")
async def add_cors_header(request: Request, call_next):
    response = await call_next(request)
    response.headers["Access-Control-Allow-Origin"] = "*"
    response.headers["Access-Control-Allow-Methods"] = "*"
    response.headers["Access-Control-Allow-Headers"] = "*"
    return response

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
class Config:
    BOT_TOKEN = os.getenv("BOT_TOKEN", "8252785543:AAFjc_rvmMhZqsqllX3uhP0XDHmwOTuqURA")
    CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME", "mane_karl")
    WEBAPP_URL = os.getenv("WEBAPP_URL", "https://admirable-pixie-edae72.netlify.app/")
    ADMIN_IDS = json.loads(os.getenv("ADMIN_IDS", "[527228466]"))
    
    bot = Bot(
        token=BOT_TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
dp = Dispatcher()
router = Router()
dp.include_router(router)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
@router.message(Command("start"))
async def start(message: Message):
    web_app = WebAppInfo(url=Config.WEBAPP_URL)
    markup = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å Mini App", web_app=web_app)]],
        resize_keyboard=True
    )
    
    if message.from_user.id in Config.ADMIN_IDS:
        builder = ReplyKeyboardBuilder()
        builder.button(text="–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
        markup = builder.as_markup(resize_keyboard=True)
    
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –∫–æ–Ω–∫—É—Ä—Å–æ–≤! üéâ",
        reply_markup=markup
    )

# –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
@router.message(F.text == "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: Message):
    if message.from_user.id not in Config.ADMIN_IDS:
        return await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
    
    builder = ReplyKeyboardBuilder()
    builder.button(text="üîÑ –°—Ç–∞—Ä—Ç –∫–æ–Ω–∫—É—Ä—Å–∞")
    builder.button(text="‚èπ –°—Ç–æ–ø –∫–æ–Ω–∫—É—Ä—Å–∞")
    builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    builder.button(text="üîô –ù–∞–∑–∞–¥")
    builder.adjust(2)
    
    await message.answer(
        "üë®‚Äçüíª –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥
@router.message(F.text == "üîÑ –°—Ç–∞—Ä—Ç –∫–æ–Ω–∫—É—Ä—Å–∞")
async def start_contest(message: Message):
    db = next(get_db())
    active_contest = db.query(Contest).filter_by(is_active=True).first()
    
    if active_contest:
        return await message.answer("‚ö†Ô∏è –ö–æ–Ω–∫—É—Ä—Å —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω")
    
    new_contest = Contest(is_active=True)
    db.add(new_contest)
    db.commit()
    await message.answer("‚úÖ –ö–æ–Ω–∫—É—Ä—Å –∑–∞–ø—É—â–µ–Ω!")

@router.message(F.text == "‚èπ –°—Ç–æ–ø –∫–æ–Ω–∫—É—Ä—Å–∞")
async def stop_contest(message: Message):
    db = next(get_db())
    contest = db.query(Contest).filter_by(is_active=True).first()
    
    if not contest:
        return await message.answer("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤")
    
    participants = db.query(User).filter_by(is_participated=True).all()
    if participants:
        winner = random.choice(participants)
        contest.winner_id = winner.user_id
        await message.answer(
            f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: @{winner.username}\n"
            f"ID: {winner.user_id}"
        )
    
    contest.is_active = False
    db.commit()
    await message.answer("‚úÖ –ö–æ–Ω–∫—É—Ä—Å –∑–∞–≤–µ—Ä—à—ë–Ω")

@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: Message):
    db = next(get_db())
    active = db.query(Contest).filter_by(is_active=True).first()
    participants = db.query(User).filter_by(is_participated=True).count()
    
    await message.answer(
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω–∫—É—Ä—Å: {'‚úÖ –î–∞' if active else '‚ùå –ù–µ—Ç'}\n"
        f"‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants}"
    )

@router.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_main(message: Message):
    await start(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Mini App
@router.message(F.web_app_data)
async def handle_webapp_data(message: Message):
    try:
        data = json.loads(message.web_app_data.data)
        user_id = message.from_user.id
        
        if data.get('action') == 'participate':
            db = next(get_db())
            user = db.query(User).filter_by(user_id=user_id).first()
            
            if not user:
                user = User(
                    user_id=user_id,
                    username=message.from_user.username,
                    full_name=message.from_user.full_name,
                    is_participated=True
                )
                db.add(user)
            else:
                user.is_participated = True
            
            db.commit()
            await message.answer(
                "üéâ –í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ!",
                reply_markup=ReplyKeyboardRemove()
            )
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

# FastAPI endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
@app.post("/check_subscription")
async def check_subscription(request: Request):
    data = await request.json()
    user_id = data.get('user_id')
    channel = data.get('channel')
    
    try:
        member = await Config.bot.get_chat_member(
            chat_id=f"@{channel}",
            user_id=user_id
        )
        return {
            "is_subscribed": member.status in [
                "member", "administrator", "creator"
            ]
        }
    except Exception as e:
        return {"error": str(e)}

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async def run_bot():
    await dp.start_polling(Config.bot)

if __name__ == "__main__":
    import asyncio
 
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    asyncio.run(run_bot())